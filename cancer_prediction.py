# -*- coding: utf-8 -*-
"""Cancer_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VhpS2f8cno1IHper59J9mO6oZCihKuuA
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score
from sklearn import svm
import joblib

logreg = LogisticRegression()

data = pd.read_csv("cancerNew.csv")

# data.head()

# data.drop(["Unnamed: 32"], axis="columns", inplace=True)

data.drop(["id"], axis="columns", inplace=True)

# data.shape
# data.head()

#Transform the non-numeric data in the columns
for column in data:
  if data[column].dtype == np.number:
    continue
  data[column] = LabelEncoder().fit_transform(data[column])

# data.head()

"""
  **Diagnosis**

    M: Malignant = Cancerous = 1
  
    B: Benign = Non-Cancerous = 0

"""

#Spliting the Features and the target
X = data.drop(columns='diagnosis', axis=1)
Y = data['diagnosis']

# print(X)
# print(Y)

#splitting data into training data and test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

# print(X.shape, X_train.shape, X_test.shape)

"""**Data Standardization**"""

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

model = LogisticRegression()
model.fit(X_train, Y_train)

"""**Evaluating The Model**"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# print("Train Data Accuracy is", train_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# print("Test Data Accuracy is", test_data_accuracy)

"""**Training The Model**"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""**Making A Prediction**"""

input_data = [13.08,0.1852,14.5,15.71,0.7477,20.49,85.63,1.383,96.09,520,14.67,630.5,0.1075,0.004097,0.1312,0.127,0.01898,0.2776,0.04568,0.01698,0.189,0.0311,0.00649,0.07283,0.1967,0.01678,0.3184,0.06811,0.002425,0.08183]

#input data as numpy array
input_data_as_np = np.asarray(input_data)

#reshape the array as we predicting only one instance
input_data_reshaped = input_data_as_np.reshape(1,-1)

#standardized the input data
std_data = sc.transform(input_data_reshaped)

# print(std_data)

prediction = model.predict(std_data)
# print(prediction)

if(prediction[0]==0):
  print('Cancer is Benign')
else:
  print('Cancer is Malignant')

joblib.dump(classifier,r"cancer_model.pkl")